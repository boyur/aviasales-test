{"version":3,"sources":["assets/svg/Logo.svg","configs/urls.js","components/Header/index.js","components/Header/Header.js","components/SettingsPanel/index.js","components/SettingsPanel/SettingsPanel.js","components/TicketsList/Ticket/index.js","components/TicketsList/Ticket/Ticket.js","components/TicketsList/index.js","components/TicketsList/TicketsList.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","urls","Header","react_default","a","createElement","className","src","logo","alt","SettingsPanel","Ticket","_ref","ticket","price","concat","origin_name","destination_name","TicketsList","tickets","map","i","TicketsList_Ticket","key","App","state","_this2","this","fetch","then","response","json","setState","catch","error","console","log","message","Fragment","components_Header","components_SettingsPanel","components_TicketsList","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gTCAzBC,EACJ,uHCCIC,ECEA,kBACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,IAAKC,IAAMC,IAAI,aCJjCC,SCCO,kBACpBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAAf,oBCHWK,eCGA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OACbV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,WAAMQ,EAAOC,OACbX,EAAAC,EAAAC,cAAA,cAAAU,OAASF,EAAOG,YAAhB,OAAAD,OAAiCF,EAAOI,sBCN7BC,ECKK,SAAAN,GAAA,IAAGO,EAAHP,EAAGO,QAAH,OAClBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEXa,EAAQC,IAAI,SAACP,EAAQQ,GAAT,OAAelB,EAAAC,EAAAC,cAACiB,EAAD,CAAQC,IAAKF,EAAGR,OAAQA,QCR1CW,6MCObC,MAAQ,CACNN,QAAS,yFAGS,IAAAO,EAAAC,KAClBC,MAAM3B,GACH4B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAjB,GAAiB,IAAdO,EAAcP,EAAdO,QACPO,EAAKM,SAAS,CAAEb,cAEjBc,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,4CAG7B,IACClB,EAAYQ,KAAKF,MAAjBN,QAER,OACEhB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkC,SAAA,KACEnC,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEXa,EACEhB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkC,SAAA,KACEnC,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,CAAatB,QAASA,KAEtB,sBA3BEuB,iBCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCVNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAC2B,GAClCA,EAAaC","file":"static/js/main.2ac4655c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.db0a2310.svg\";","export default {\n  tickets: 'https://raw.githubusercontent.com/KosyanMedia/test-tasks/master/aviasales/tickets.json',\n};\n","import Header from './Header';\n\nexport default Header;\n","import React from 'react';\nimport './Header.scss';\nimport logo from '../../assets/svg/Logo.svg';\n\nconst Header = () => (\n  <div className=\"header\">\n    <img className=\"header_logo\" src={logo} alt=\"Search\" />\n  </div>\n);\n\nexport default Header;\n","import SettingsPanel from './SettingsPanel';\n\nexport default SettingsPanel;\n","import React from 'react';\nimport './SettingsPanel.scss';\n\nconst SettingsPanel = () => (\n  <div className=\"settings-panel\">\n    <div className=\"settings-panel__container\">\n      SettingsPanel\n    </div>\n  </div>\n);\n\nexport default SettingsPanel;\n","import Ticket from './Ticket';\n\nexport default Ticket;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Ticket.scss';\n\nconst Ticket = ({ ticket }) => (\n  <div className=\"ticket\">\n    <div>{ticket.price}</div>\n    <div>{`${ticket.origin_name} - ${ticket.destination_name}`}</div>\n  </div>\n);\n\nTicket.propTypes = {\n  ticket: PropTypes.shape({\n    origin: PropTypes.string,\n    origin_name: PropTypes.string,\n    destination: PropTypes.string,\n    destination_name: PropTypes.string,\n    departure_date: PropTypes.string,\n    departure_time: PropTypes.string,\n    arrival_date: PropTypes.string,\n    arrival_time: PropTypes.string,\n    carrier: PropTypes.string,\n    stops: PropTypes.number,\n    price: PropTypes.number,\n  }).isRequired,\n};\n\nexport default Ticket;\n","import TicketsList from './TicketsList';\n\nexport default TicketsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TicketsList.scss';\n\nimport Ticket from './Ticket';\n\nconst TicketsList = ({ tickets }) => (\n  <div className=\"tickets-list\">\n    {\n      tickets.map((ticket, i) => <Ticket key={i} ticket={ticket} />)\n    }\n  </div>\n);\n\nTicketsList.propTypes = {\n  tickets: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default TicketsList;\n","import App from './App';\n\nexport default App;\n","import React, { PureComponent } from 'react';\nimport urls from '../../configs/urls';\nimport './App.scss';\n\nimport Header from '../Header';\nimport SettingsPanel from '../SettingsPanel';\nimport TicketsList from '../TicketsList';\n\nclass App extends PureComponent {\n  state = {\n    tickets: null,\n  };\n\n  componentDidMount() {\n    fetch(urls.tickets)\n      .then(response => response.json())\n      .then(({ tickets }) => {\n        this.setState({ tickets });\n      })\n      .catch(error => console.log(error.message));\n  }\n\n  render() {\n    const { tickets } = this.state;\n\n    return (\n      <>\n        <Header />\n        <div className=\"layout\">\n          {\n            tickets ? (\n              <>\n                <SettingsPanel />\n                <TicketsList tickets={tickets} />\n              </>\n            ) : 'Loading...'\n          }\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css/normalize.css';\nimport './index.scss';\n\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}